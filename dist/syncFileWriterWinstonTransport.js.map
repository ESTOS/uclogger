{"version":3,"file":"syncFileWriterWinstonTransport.js","sourceRoot":"","sources":["../src/syncFileWriterWinstonTransport.ts"],"names":[],"mappings":";;;;;AACA,0EAAgD;AAChD,4CAAoB;AACpB,gDAAwB;AAGxB;;GAEG;AACH,MAAM,8BAA+B,SAAQ,2BAAe;IAI3D;;;;;OAKG;IACH,YAAmB,IAA0B,EAAE,YAAY,GAAG,CAAC;QAC9D,KAAK,CAAC,IAA8C,CAAC,CAAC;QAT/C,iBAAY,GAAG,CAAC,CAAC;QAUxB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QAEjC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ;YAC1B,MAAM,KAAK,CAAC,iCAAiC,CAAC,CAAC;QAEhD,uBAAuB;QACvB,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,cAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC9C,YAAE,CAAC,SAAS,CAAC,cAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAE3C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,2BAA2B;QAC3B,YAAE,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IACrD,CAAC;IAED;;;;;OAKG;IACa,GAAG,CAAC,IAAc,EAAE,QAAoB;QACvD,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;QAC1E,YAAE,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;QACzD,QAAQ,EAAE,CAAC;IACZ,CAAC;CACD;AAED,kBAAe,8BAA8B,CAAC","sourcesContent":["import { LogEntry } from \"winston\";\r\nimport TransportStream from \"winston-transport\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { FileTransportOptions } from \"winston/lib/winston/transports\";\r\n\r\n/**\r\n * Loki module for winston transport\r\n */\r\nclass SyncFileWriterWinstonTransport extends TransportStream {\r\n\tprivate filePath: string;\r\n\tprivate iPrettyPrint = 0;\r\n\r\n\t/**\r\n\t * Initialise winston module for loki\r\n\t *\r\n\t * @param opts - options\r\n\t * @param iPrettyPrint - pretty print the messages\r\n\t */\r\n\tpublic constructor(opts: FileTransportOptions, iPrettyPrint = 0) {\r\n\t\tsuper(opts as TransportStream.TransportStreamOptions);\r\n\t\tthis.iPrettyPrint = iPrettyPrint;\r\n\r\n\t\tif (!opts || !opts.filename)\r\n\t\t\tthrow Error(\"Missing parameter opts.filePath\");\r\n\r\n\t\t// Check if file exists\r\n\t\tif (!fs.existsSync(path.dirname(opts.filename)))\r\n\t\t\tfs.mkdirSync(path.dirname(opts.filename));\r\n\r\n\t\tthis.filePath = opts.filename;\r\n\t\t// Create file (test write)\r\n\t\tfs.writeFileSync(this.filePath, \"\", { flag: \"w+\" });\r\n\t}\r\n\r\n\t/**\r\n\t * callback from winston tansport to process logs\r\n\t *\r\n\t * @param info - log data\r\n\t * @param callback - callback to call once log is processed\r\n\t */\r\n\tpublic override log(info: LogEntry, callback: () => void) {\r\n\t\tconst toWrite = JSON.stringify(info, undefined, this.iPrettyPrint) + \"\\n\";\r\n\t\tfs.writeFileSync(this.filePath, toWrite, { flag: \"as\" });\r\n\t\tcallback();\r\n\t}\r\n}\r\n\r\nexport default SyncFileWriterWinstonTransport;\r\n"]}