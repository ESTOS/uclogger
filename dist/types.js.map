{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import { Format } from \"logform\";\r\n\r\n/**\r\n * Error values, highest to lowest\r\n */\r\n// Mapping to winston levels necessary! -> https://github.com/winstonjs/winston#logging-levels\r\nexport type LogLevels = \"error\" | \"warn\" | \"info\" | \"debug\";\r\n\r\nexport interface ILogFilterConfig {\r\n\t// The two filters depend on another\r\n\t// If you set includes the name must match -> default changes to DO NOT WRITE entry\r\n\t// If you set excludes the name is not allowd to match -> default changes to WRITE entry\r\n\t// If you set includes and excludes the classname is first filtered for includes and then for excludes\r\n\tincludeClassNames?: string[];\r\n\texcludeClassNames?: string[];\r\n\r\n\tincludeMethodNames?: string[];\r\n\texcludeMethodNames?: string[];\r\n\r\n\tincludeMessages?: string[];\r\n\texcludeMessages?: string[];\r\n}\r\n\r\nexport interface ILogFilterConfigs {\r\n\t// Name you may add in the filter to match it while debugging inside transform in elogger.js\r\n\tdebugName?: string;\r\n\t// Use this filter if you want to log specific methods or classes no matter which loglevel has been raised\r\n\tcommon?: ILogFilterConfig | boolean;\r\n\t// Uses these filters if you want to log specific levels with different settings\r\n\t// e.g. if you want to log error and warn always, but debug only if a certain method is handling it\r\n\tdebug?: ILogFilterConfig | boolean;\r\n\terror?: ILogFilterConfig | boolean;\r\n\tinfo?: ILogFilterConfig | boolean;\r\n\twarn?: ILogFilterConfig | boolean;\r\n}\r\n\r\nexport interface IFileLog {\r\n\t/** Logging directory */\r\n\tlogDirectory: string;\r\n\t/** Logfile name */\r\n\tlogFilename: string;\r\n\t/** The logfile will be pretty printed (instead of one entry per line), defines the amount of spaces added per indentation */\r\n\tprettyPrintLogFile?: number;\r\n\t/** Maximum file size, defaults to 1048576 (1024*1024) */\r\n\tmaxFileSize?: number;\r\n\t/** Maximum file count, defaults to 5 */\r\n\tmaxFileCount?: number;\r\n\t/** Always use a new file */\r\n\tbNewFileAlways?: boolean;\r\n\t/** Loglevel this logwriter should print out. If no loglevel is specified the IELoggerSettings loglevel is used */\r\n\tlogLevel?: LogLevels;\r\n\t/** Use this filter out certain properties and large objects from the log messages (e.g. websocket objects) */\r\n\tfilterData?: Format;\r\n\t/** If this logfile should only contain certain messages use the filter configuration */\r\n\tfilter?: ILogFilterConfigs;\r\n\t/** Enable sync logging. Only for local debug may break on production */\r\n\tbSyncLogging?: boolean;\r\n}\r\n\r\ninterface IConsoleLog {\r\n\tlogConsole: boolean;\r\n\t/** Instead of logging the formatted messages you can also set the console logger to log the json objects. This shows them in a tree mode in VSCode. */\r\n\tlogObjectInsteadOfMessage?: boolean;\r\n\t/** Loglevel this logwriter should print out. If no loglevel is specified the IELoggerSettings loglevel is used */\r\n\tlogLevel?: LogLevels;\r\n\t/** Use this filter out certain properties and large objects from the log messages (e.g. websocket objects) */\r\n\tfilterData?: Format;\r\n\t/** If this logfile should only contain certain messages use the filter configuration */\r\n\tfilter?: ILogFilterConfigs;\r\n\t/** True will make sure json is not prettyprinted is default false */\r\n\tmultiline?: boolean;\r\n}\r\n\r\n// Settings about the infrastructure\r\nexport interface IEInfrastructureParameters {\r\n\t/** process.env.NODE_ENV */\r\n\tenvironment: string;\r\n\t/** process.env.SERVER_NAME */\r\n\tservername: string;\r\n\t/** process.env.NODE_ROLE */\r\n\trole: string;\r\n\t/** process.env.NODE_ROLE_INSTANCE || 0 */\r\n\trole_instance: number;\r\n}\r\n\r\n// These are the labels we use for loki. They are added for the log entries towards loki\r\nexport interface ILokiConfigLabels {\r\n\t// uniqe job name to filter in grafana e.g. \"econf-server\" | \"econf-frontend\"\r\n\tjob: string;\r\n\t// Instance of the server that is writing the log entries - FQDN of the server e.g. \"ecs-1.meetings.procall.de\" | \"meetings.procall.de\"\r\n\tinstance: string;\r\n\t// Environment this system is running in\r\n\tenvironment: \"development\" | \"staging\" | \"production\";\r\n\t// ! We wonÂ´t support other labels in here !\r\n\t// In case we need log message related labels we would add a callback here\r\n\t// This callback would then receive the log data and the callee could fetch additional labels from the log data and hand it back\r\n}\r\n\r\n// For Loki we can specify alternate labels for certain log entry calls\r\n// In order to specify that those alternate labels shall be used the meta needs to contain the lokiLabelsKey key and the ILokiConfig the matching entry in the map\r\nexport interface ILokiAlternateLabelsMeta {\r\n\tlokiLabelsKey?: string;\r\n}\r\n\r\n// ILokiConfig\r\nexport interface ILokiConfig {\r\n\t// URL for Grafana Loki\r\n\thost: string;\r\n\t// Default labels we set for loki log entries\r\n\tlabels: ILokiConfigLabels;\r\n\t// Alternative labels we use instead of the default labels above\r\n\t// If the meta data is using the type ILokiAlternateLabelsMeta and the lokiLabelsKey points to an entry in that map we use the labels from the map\r\n\t// If the alternateLabels or if a property in it is missing we use the default labels above (or just the missing property)\r\n\talternateLabels: Map<string, ILokiConfigLabels> | undefined;\r\n\t// Basic Auth credentials is needed\r\n\tbasicAuth?: string;\r\n\t// Caches logs to flush them later to loki at once\r\n\tuseCache?: boolean;\r\n\t// Log level for loki\r\n\tlevel?: LogLevels;\r\n}\r\n\r\n// ELoggerSettings\r\nexport interface IELoggerSettings {\r\n\t/** A file logger or a list  of file loggers (each may specifiy which content it should write using the filter object */\r\n\tfileLog?: IFileLog | IFileLog[];\r\n\t/** Logging to console */\r\n\tconsoleLog?: IConsoleLog;\r\n\t/**\r\n\t * NPM Logging levels https://github.com/winstonjs/winston#logging-levels\r\n\t * You may specify a different loglevel in the different log writers\r\n\t */\r\n\tlogLevel: LogLevels;\r\n\t/** Infrastructure parameters (see above) */\r\n\tinfrastructure: IEInfrastructureParameters;\r\n\t/** Logging to Loki */\r\n\tlokiLog?: ILokiConfig;\r\n\t/**\r\n\t * Configures the logger to log errors only once and subsequent calls with the specified loglevel\r\n\t * Default is error so subsequent calls with the same error object are normally logged\r\n\t * Set it to e.g. debug if subsequent calls shall get logged as debug message\r\n\t * or null if subsequent calls should not get logged at all\r\n\t */\r\n\tlogSubsequentErrorsAs?: LogLevels | null;\r\n\tsyncLogPath?: string;\r\n}\r\n\r\n// The log data blob whichn is provided through the ILogCallback\r\nexport interface ILogData {\r\n\tclassName: string;\r\n\tclassProps?: {\r\n\t\t// This object will contain further application and implementation specific members like\r\n\t\t// session ids, user ids etc.\r\n\t\t[propName: string]: unknown;\r\n\t};\r\n}\r\n\r\nexport interface IFinalLogData extends ILogData {\r\n\ttime: string;\r\n\tlevel: LogLevels;\r\n\tmessage: string;\r\n\tmethod: string;\r\n\tmeta?: unknown | ILokiAlternateLabelsMeta;\r\n\tcause?: unknown | string;\r\n\tlokiLabelsKey?: string;\r\n}\r\n\r\n// The callback that is used to query log data for a log invoke\r\nexport interface ILogCallback {\r\n\tgetLogData(): ILogData;\r\n}\r\n\r\n/**\r\n * Helper to access wether an error object has already been processed as error by the logger\r\n */\r\nexport interface ILoggerHandledError extends Error {\r\n\t// the logger sets the property to true once it has logged the error object\r\n\t// It allows to change the loglevel for subsequent calls from error to debug\r\n\tbHandled?: true;\r\n}\r\n\r\n/**\r\n * Type definition so that we can provide the classname of the object calling the logger by just handing over\r\n */\r\ninterface IConstructedObject {\r\n\tconstructor: {\r\n\t\tname: string;\r\n\t};\r\n}\r\n\r\n// Provides additional context for a log call\r\n// - This may be a callback that then provides data,\r\n// - Dedicated data provides as ILogData\r\n// - Or if we just want to add the classname of the class calling the logger\r\nexport type ILogContext = ILogCallback | ILogData | IConstructedObject;\r\n\r\n// Config for the console logging\r\n// Usage is pretty simple and uses regular expressions for matching\r\n\r\n// If you do not specify anything, everything is logged -> defaults to true for all of them\r\n// If you:\r\n// - do not want certain levels to be logged, specify false\r\n// - only want certain levels to be logged, specify the regular expression matching classnames and or methodnames\r\n//   if any of the conditions matches the entry will be logged\r\n\r\n/**\r\n * Interface to a logger implementing class / object\r\n */\r\nexport interface ILogger {\r\n\t/**\r\n\t * Logs an error into the logger. If the error is undefined creates an exception internally and pops off the call into the logger from the stack trace\r\n\t * The logger adds a bHandled to the error object which the caller handed over. Subsequent error calls with the same error object are afterwards logged\r\n\t * as debug message and longer as error. This simplifies error handling and logging over multiple layers in the software\r\n\t *\r\n\t * @param msg - The message to log\r\n\t * @param calling_method - The method that was calling the logger\r\n\t * @param context - provides contextual data as callback, dedicated data as ILogData or just the classname calling the logger\r\n\t * @param meta - Meta data the caller wants to add to the log request\r\n\t * @param error - Any kind of error message.\r\n\t */\r\n\terror(msg: string, calling_method: string, context?: ILogContext, meta?: Record<string, unknown>, error?: unknown): void;\r\n\r\n\t/**\r\n\t * Logs a warning entry into the logger\r\n\t *\r\n\t * @param msg - The message to log\r\n\t * @param calling_method - The method that was calling the logger\r\n\t * @param context - provides contextual data as callback, dedicated data as ILogData or just the classname calling the logger\r\n\t * @param meta - Meta data the caller wants to add to the log request\r\n\t * @param error - Any kind of error message.\r\n\t */\r\n\twarn(msg: string, calling_method: string, context?: ILogContext, meta?: Record<string, unknown>, error?: unknown): void;\r\n\r\n\t/**\r\n\t * Logs an info entry into the logger\r\n\t *\r\n\t * @param msg - The message to log\r\n\t * @param calling_method - The method that was calling the logger\r\n\t * @param context - provides contextual data as callback, dedicated data as ILogData or just the classname calling the logger\r\n\t * @param meta - Meta data the caller wants to add to the log request\r\n\t * @param error - Any kind of error message.\r\n\t */\r\n\tinfo(msg: string, calling_method: string, context?: ILogContext, meta?: Record<string, unknown>, error?: unknown): void;\r\n\r\n\t/**\r\n\t * Logs a debug entry into the logger\r\n\t *\r\n\t * @param msg - The message to log\r\n\t * @param calling_method - The method that was calling the logger\r\n\t * @param context - provides contextual data as callback, dedicated data as ILogData or just the classname calling the logger\r\n\t * @param meta - Meta data the caller wants to add to the log request\r\n\t * @param error - Any kind of error message.\r\n\t */\r\n\tdebug(msg: string, calling_method: string, context?: ILogContext, meta?: Record<string, unknown>, error?: unknown): void;\r\n}\r\n"]}