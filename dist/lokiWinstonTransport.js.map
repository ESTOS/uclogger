{"version":3,"file":"lokiWinstonTransport.js","sourceRoot":"","sources":["../src/lokiWinstonTransport.ts"],"names":[],"mappings":"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","sourcesContent":["import http from \"http\";\r\nimport https from \"https\";\r\nimport { LogEntry } from \"winston\";\r\nimport TransportStream from \"winston-transport\";\r\n\r\nimport { ILokiConfig, ILokiConfigLabels } from \"./types\";\r\n\r\nconst post = (lokiUrl: URL, contentType: string, headers = {}, data = \"\", auth?: string) => {\r\n\t// Construct a buffer from the data string to have deterministic data size\r\n\tconst dataBuffer = Buffer.from(data, \"utf8\");\r\n\r\n\t// Construct the headers\r\n\tconst defaultHeaders = {\r\n\t\t\"Content-Type\": contentType,\r\n\t\t\"Content-Length\": dataBuffer.length\r\n\t};\r\n\r\n\t// Decide which http library to use based on the url\r\n\tconst isHttps = lokiUrl.protocol === \"https:\";\r\n\r\n\t// Construct the node request options\r\n\tconst options: http.RequestOptions | https.RequestOptions = {\r\n\t\thostname: lokiUrl.hostname,\r\n\t\tpath: lokiUrl.pathname,\r\n\t\tmethod: \"POST\",\r\n\t\theaders: Object.assign(defaultHeaders, headers),\r\n\t\tauth: undefined\r\n\t};\r\n\r\n\tif (lokiUrl.port && lokiUrl.port !== \"\")\r\n\t\toptions.port = lokiUrl.port;\r\n\telse\r\n\t\toptions.port = lokiUrl.protocol === \"https:\" ? 443 : 80;\r\n\r\n\t/* istanbul ignore else */\r\n\tif (auth != null)\r\n\t\toptions.auth = auth;\r\n\r\n\t// Construct the request\r\n\tlet req: http.ClientRequest;\r\n\tif (isHttps) {\r\n\t\treq = https.request(options, res => {\r\n\t\t\tlet resData = \"\";\r\n\t\t\tres.on(\"data\", data => (resData += data));\r\n\t\t\tres.on(\"end\", () => {\r\n\t\t\t\tif (res && res.statusCode && res.statusCode >= 400)\r\n\t\t\t\t\t(console as Console).error({ message: \"Failed to send logs.\", data: resData });\r\n\t\t\t});\r\n\t\t});\r\n\t} else {\r\n\t\treq = http.request(options, res => {\r\n\t\t\tlet resData = \"\";\r\n\t\t\tres.on(\"data\", data => (resData += data));\r\n\t\t\tres.on(\"end\", () => {\r\n\t\t\t\tif (res && res.statusCode && res.statusCode >= 400)\r\n\t\t\t\t\t(console as Console).error({ message: \"Failed to send logs.\", data: resData });\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t// Error listener\r\n\t/* istanbul ignore next */\r\n\treq.on(\"error\", error => {\r\n\t\t/* eslint-disable no-console */\r\n\t\t/* istanbul ignore next */\r\n\t\tconsole.log(\"Failed to send logs to loki.\", error.message);\r\n\t\t/* eslint-enable no-console */\r\n\t});\r\n\r\n\t// Write to request\r\n\treq.write(dataBuffer);\r\n\treq.end();\r\n};\r\n\r\n/**\r\n * Loki stream object used to send logs to loki\r\n */\r\nclass LokiStream {\r\n\tpublic time: string;\r\n\tpublic stream: unknown;\r\n\tpublic data: {\r\n\t\tmeta?: unknown;\r\n\t\tmessage: string;\r\n\t\tmethod?: string;\r\n\t\tclassName?: string;\r\n\t\tclassProps?: unknown;\r\n\t\terror?: Error;\r\n\t};\r\n\r\n\t/**\r\n\t * Creates LokiStream instance\r\n\t *\r\n\t * @param time - timestamp\r\n\t * @param labels - label\r\n\t * @param message - message\r\n\t * @param method - method\r\n\t * @param className - className\r\n\t * @param classProps - classProps\r\n\t * @param meta - meta values\r\n\t * @param error - error instance\r\n\t */\r\n\tpublic constructor(time: string, labels: { [labelName: string]: string }, message: string, method: string, className: string, classProps?: unknown, meta?: unknown, error?: Error) {\r\n\t\tthis.time = time;\r\n\t\tthis.stream = labels;\r\n\r\n\t\tthis.data = {\r\n\t\t\tmessage\r\n\t\t};\r\n\t\tif (meta)\r\n\t\t\tthis.data.meta = meta;\r\n\t\tif (method)\r\n\t\t\tthis.data.method = method;\r\n\t\tif (className)\r\n\t\t\tthis.data.className = className;\r\n\t\tif (classProps)\r\n\t\t\tthis.data.classProps = classProps;\r\n\t\tif (error)\r\n\t\t\tthis.data.error = error;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns multidimensional array with which can be processed by loki\r\n\t *\r\n\t * @returns - multi dimensional array\r\n\t */\r\n\tpublic valuesToString(): [[string, string]] {\r\n\t\treturn [[this.time, JSON.stringify(this.data)]];\r\n\t}\r\n}\r\n\r\n/**\r\n * Public loki instance can be parsed as stream or send individually\r\n */\r\nclass LokiLog {\r\n\tpublic streams: LokiStream[] = [];\r\n\r\n\t/**\r\n\t * Creates LokiStream instance\r\n\t *\r\n\t * @param time - timestamp\r\n\t * @param labels - label\r\n\t * @param message - message\r\n\t * @param method - method\r\n\t * @param className - className\r\n\t * @param classProps - classProps\r\n\t * @param meta - meta values\r\n\t * @param error - error instance\r\n\t */\r\n\tpublic constructor(time: string, labels: { [labelName: string]: string }, message: string, method: string, className: string, classProps?: unknown, meta?: unknown, error?: Error) {\r\n\t\tthis.streams = [];\r\n\t\tthis.streams.push(new LokiStream(time, labels, message, method, className, classProps, meta, error));\r\n\t}\r\n\r\n\t/**\r\n\t * Parses its stream object to string\r\n\t *\r\n\t * @returns - string representation of list of loki streams\r\n\t */\r\n\tpublic toString() {\r\n\t\treturn JSON.stringify({\r\n\t\t\tstreams: this.streams.map((stream) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstream: stream.stream,\r\n\t\t\t\t\tvalues: stream.valuesToString()\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Loki module for winston transport\r\n */\r\nclass LokiWinstonTransport extends TransportStream {\r\n\tpublic host: string;\r\n\tpublic alternateLabels: Map<string, ILokiConfigLabels> | undefined = undefined;\r\n\tpublic labels: ILokiConfigLabels;\r\n\tpublic auth?: string;\r\n\r\n\t/**\r\n\t * Initialise winston module for loki\r\n\t *\r\n\t * @param opts - options\r\n\t */\r\n\tpublic constructor(opts: ILokiConfig) {\r\n\t\tsuper(opts as TransportStream.TransportStreamOptions);\r\n\t\tthis.host = opts.host;\r\n\r\n\t\t// Format { [Label key]: [Labels]} LabelKey can be referenced by a meta attribute \"lokiLabelKey\"\r\n\t\t// e.g. { diagnostics: {instance: \"diagnostics\"}, default: {instance: \"ucwebinstance\"} }\r\n\t\t// When no lokiLabelKey is provided mit meta data label data from opts.labels will be used.\r\n\t\tthis.alternateLabels = opts.alternateLabels;\r\n\t\tthis.labels = opts.labels;\r\n\t\tthis.auth = opts.basicAuth || undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * callback from winston tansport to process logs\r\n\t *\r\n\t * @param info - log data\r\n\t * @param callback - callback to call once log is processed\r\n\t */\r\n\tpublic override log(info: LogEntry, callback: () => void) {\r\n\t\t/*\r\n\t\t\thttps://github.com/winstonjs/winston-transport/issues/61\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.emit(\"logged\", info);\r\n\t\t\t}, 0);\r\n\t\t*/\r\n\r\n\t\t// Parse log\r\n\t\tconst dynamicLabels = { level: info.level };\r\n\r\n\t\tlet labels = dynamicLabels;\r\n\t\tif (this.alternateLabels && \"lokiLabelsKey\" in info)\r\n\t\t\tlabels = Object.assign(labels, this.alternateLabels.get(info[\"lokiLabelsKey\"]) || this.labels);\r\n\t\telse\r\n\t\t\tlabels = Object.assign(labels, this.labels);\r\n\r\n\t\tconst time = (new Date(info[\"time\"]).getTime()).toFixed() + \"000000\";\r\n\t\tconst lokiLog = new LokiLog(time, labels, info.message, info[\"method\"], info[\"className\"], info[\"classProps\"], info[\"meta\"], info[\"cause\"]);\r\n\t\tconst data = lokiLog.toString();\r\n\r\n\t\tif (this.auth)\r\n\t\t\tpost(new URL(this.host), \"application/json\", {}, data, this.auth);\r\n\t\telse\r\n\t\t\tpost(new URL(this.host), \"application/json\", {}, data);\r\n\r\n\t\tcallback();\r\n\t}\r\n}\r\n\r\nexport default LokiWinstonTransport;\r\n"]}